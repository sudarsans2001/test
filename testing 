curl --http1.1 http://localhost:8002/
curl --http1.1 -X POST http://localhost:8002/predict -H "Content-Type: application/json" -d '{"Warehouse_block":0,"Mode_of_Shipment":0,"Customer_care_calls":2,"Customer_rating":3,"Cost_of_the_Product":150,"Prior_purchases":3,"Product_importance":0,"Gender":0,"Discount_offered":10,"Weight_in_gms":2000}'





git init
echo "__pycache__/
*.pyc
venv/
train.csv
*.log" > .gitignore
git add .
git commit -m "Initial commit with FastAPI app and Dockerfile for port 8002"



name: CI for Shipment Prediction

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run model development
      run: |
        python model.py

    - name: Run FastAPI server in background
      run: |
        uvicorn app:app --host 0.0.0.0 --port 8002 &
        sleep 5  # Wait for server to start

    - name: Test FastAPI home endpoint
      run: |
        curl --http1.1 http://localhost:8002/ || exit 1

    - name: Test FastAPI predict endpoint
      run: |
        curl --http1.1 -X POST http://localhost:8002/predict -H "Content-Type: application/json" -d '{"Warehouse_block":0,"Mode_of_Shipment":0,"Customer_care_calls":2,"Customer_rating":3,"Cost_of_the_Product":150,"Prior_purchases":3,"Product_importance":0,"Gender":0,"Discount_offered":10,"Weight_in_gms":2000}' || exit 1

    - name: Stop FastAPI server
      run: |
        pkill -f uvicorn

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t shipment-live-prec .

    - name: Run Docker container
      run: |
        docker run -d -p 8002:8002 --name shipment-container shipment-live-prec
        sleep 5  # Wait for container to start

    - name: Test Dockerized FastAPI home endpoint
      run: |
        curl --http1.1 http://localhost:8002/ || exit 1

    - name: Test Dockerized FastAPI predict endpoint
      run: |
        curl --http1.1 -X POST http://localhost:8002/predict -H "Content-Type: application/json" -d '{"Warehouse_block":0,"Mode_of_Shipment":0,"Customer_care_calls":2,"Customer_rating":3,"Cost_of_the_Product":150,"Prior_purchases":3,"Product_importance":0,"Gender":0,"Discount_offered":10,"Weight_in_gms":2000}' || exit 1

    - name: Stop Docker container
      run: |
        docker stop shipment-container




import pytest
from fastapi.testclient import TestClient
from app import app

client = TestClient(app)

def test_home_endpoint():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Shipment Delay Prediction API is live."}

def test_predict_valid():
    payload = {
        "Warehouse_block": 0,
        "Mode_of_Shipment": 0,
        "Customer_care_calls": 2,
        "Customer_rating": 3,
        "Cost_of_the_Product": 150,
        "Prior_purchases": 3,
        "Product_importance": 0,
        "Gender": 0,
        "Discount_offered": 10,
        "Weight_in_gms": 2000
    }
    response = client.post("/predict", json=payload)
    assert response.status_code == 200
    assert "prediction" in response.json()
    assert response.json()["prediction"] in ["On Time", "Delayed"]

def test_predict_invalid_missing_field():
    payload = {
        "Warehouse_block": 0,
        "Mode_of_Shipment": 0,
        "Customer_care_calls": 2,
        "Customer_rating": 3,
        "Cost_of_the_Product": 150,
        "Prior_purchases": 3,
        "Product_importance": 0,
        "Gender": 0,
        "Discount_offered": 10
        # Missing Weight_in_gms
    }
    response = client.post("/predict", json=payload)
    assert response.status_code == 422  # Unprocessable Entity
    assert "detail" in response.json()

def test_predict_invalid_negative_value():
    payload = {
        "Warehouse_block": 0,
        "Mode_of_Shipment": 0,
        "Customer_care_calls": 2,
        "Customer_rating": 3,
        "Cost_of_the_Product": 150,
        "Prior_purchases": 3,
        "Product_importance": 0,
        "Gender": 0,
        "Discount_offered": -10,  # Negative value
        "Weight_in_gms": 2000
    }
    response = client.post("/predict", json=payload)
    assert response.status_code == 422  # Unprocessable Entity
    assert "detail" in response.json()